---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: Account Password Policy, a cloudonaut.io template (qs-1s39ksj9f)'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Password Policy Parameters'
      Parameters:
      - AllowUsersToChangePassword
      - HardExpiry
      - MaxPasswordAge
      - MinimumPasswordLength
      - PasswordReusePrevention
      - RequireLowercaseCharacters
      - RequireNumbers
      - RequireSymbols
      - RequireUppercaseCharacters
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogsRetentionInDays
Parameters:
  CisAlertingEmail:
    Description: 'Email Address to send Alert notifications for CIS breaches'
    Type: String
    AllowedPattern: '^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$'
  AllowUsersToChangePassword:
    Description: 'You can permit all IAM users in your account to use the IAM console to change their own passwords.'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  HardExpiry:
    Description: 'You can prevent IAM users from choosing a new password after their current password has expired.'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  MaxPasswordAge:
    Description: 'You can set IAM user passwords to be valid for only the specified number of days.'
    Type: Number
    Default: 90
    ConstraintDescription: 'Must be in the range [0-1095]'
    MinValue: 0
    MaxValue: 1095
  MinimumPasswordLength:
    Description: 'You can specify the minimum number of characters allowed in an IAM user password.'
    Type: Number
    Default: 14
    ConstraintDescription: 'Must be in the range [6-128]'
    MinValue: 6
    MaxValue: 128
  PasswordReusePrevention:
    Description: 'You can prevent IAM users from reusing a specified number of previous passwords.'
    Type: Number
    Default: 24
    ConstraintDescription: 'Must be in the range [0-24]'
    MinValue: 0
    MaxValue: 24
  RequireLowercaseCharacters:
    Description: 'You can require that IAM user passwords contain at least one lowercase character from the ISO basic Latin alphabet (a to z).'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireNumbers:
    Description: 'You can require that IAM user passwords contain at least one numeric character (0 to 9).'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireSymbols:
    Description: 'You can require that IAM user passwords contain at least one of the following nonalphanumeric characters: ! @ # $ % ^ & * ( ) _ + - = [ ] {} | '''
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  RequireUppercaseCharacters:
    Description: 'You can require that IAM user passwords contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).'
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Conditions:
  GovCloudCondition:
    !Equals
    - !Ref AWS::Region
    - us-gov-west-1

Resources:
  # GuardDuty:
  #   Type: "AWS::GuardDuty::Detector"
  #   Properties:
  #     Enable: true

  # Check to see if GuardDuty is enabled
  # If disabled -> enabled
  # If enabled -> return
  EnableGuardDuty:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          from os import environ

          gdClient = boto3.client('guardduty',region_name=environ.get('AWS_REGION'))

          def getDetector():
              detectorId = gdClient.list_detectors().get('DetectorIds')
              return detectorId

          def createDetector():
              detectorId = gdClient.create_detector(Enable=True)
              return detectorId

          def deleteDetector():
              detectorId = getDetector()
              response = gdClient.delete_detector(DetectorId=detectorId[0])
              return response
          
          def handler(event, context):
              print(event)           

              detectorId = getDetector()
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                    if detectorId:
                      print('We have a detector: {}'.format(detectorId[0]))
                      responseData['DetectorId'] = detectorId[0]  
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'createdGuardDutyDetector')
                    else:
                      print('Creating detector...')
                      detectorId = createDetector()
                      responseData['DetectorId'] = detectorId[0]
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'createdGuardDutyDetector')
                  except Exception as e:
                    responseData['error'] = str(e)
                    cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'createdGuardDutyDetector')
              if event['RequestType'] == 'Update':
                if detectorId:
                  responseData['DetectorId'] = detectorId[0]
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'id')
                else:
                  print('We have no detector')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'id')
              if event['RequestType'] == 'Delete':
                response = deleteDetector()
                responseData['Result'] = response
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'id')
      Description: Enable GuardDuty
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 10

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:*
              - Effect: Allow
                Action:
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAddressesAttribute
                  - ec2:DescribeAggregateIdFormat
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeBundleTasks
                  - ec2:DescribeByoipCidrs
                  - ec2:DescribeCapacityReservations
                  - ec2:DescribeCarrierGateways
                  - ec2:DescribeClassicLinkInstances
                  - ec2:DescribeClientVpnAuthorizationRules
                  - ec2:DescribeClientVpnConnections
                  - ec2:DescribeClientVpnEndpoints
                  - ec2:DescribeClientVpnRoutes
                  - ec2:DescribeClientVpnTargetNetworks
                  - ec2:DescribeCoipPools
                  - ec2:DescribeConversionTasks
                  - ec2:DescribeCustomerGateways
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeEgressOnlyInternetGateways
                  - ec2:DescribeElasticGpus
                  - ec2:DescribeExportImageTasks
                  - ec2:DescribeExportTasks
                  - ec2:DescribeFastSnapshotRestores
                  - ec2:DescribeFleetHistory
                  - ec2:DescribeFleetInstances
                  - ec2:DescribeFleets
                  - ec2:DescribeFlowLogs
                  - ec2:DescribeFpgaImageAttribute
                  - ec2:DescribeFpgaImages
                  - ec2:DescribeHostReservationOfferings
                  - ec2:DescribeHostReservations
                  - ec2:DescribeHosts
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeIdFormat
                  - ec2:DescribeIdentityIdFormat
                  - ec2:DescribeImageAttribute
                  - ec2:DescribeImages
                  - ec2:DescribeImportImageTasks
                  - ec2:DescribeImportSnapshotTasks
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceCreditSpecifications
                  - ec2:DescribeInstanceEventNotificationAttributes
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstanceTypeOfferings
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeInstances
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeIpv6Pools
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeLaunchTemplateVersions
                  - ec2:DescribeLaunchTemplates
                  - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
                  - ec2:DescribeLocalGatewayRouteTableVpcAssociations
                  - ec2:DescribeLocalGatewayRouteTables
                  - ec2:DescribeLocalGatewayVirtualInterfaceGroups
                  - ec2:DescribeLocalGatewayVirtualInterfaces
                  - ec2:DescribeLocalGateways
                  - ec2:DescribeManagedPrefixLists
                  - ec2:DescribeMovingAddresses
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeNetworkInsightsAnalyses
                  - ec2:DescribeNetworkInsightsPaths
                  - ec2:DescribeNetworkInterfaceAttribute
                  - ec2:DescribeNetworkInterfacePermissions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribePlacementGroups
                  - ec2:DescribePrefixLists
                  - ec2:DescribePrincipalIdFormat
                  - ec2:DescribePublicIpv4Pools
                  - ec2:DescribeRegions
                  - ec2:DescribeReservedInstances
                  - ec2:DescribeReservedInstancesListings
                  - ec2:DescribeReservedInstancesModifications
                  - ec2:DescribeReservedInstancesOfferings
                  - ec2:DescribeRouteTables
                  - ec2:DescribeScheduledInstanceAvailability
                  - ec2:DescribeScheduledInstances
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSnapshotAttribute
                  - ec2:DescribeSnapshots
                  - ec2:DescribeSpotDatafeedSubscription
                  - ec2:DescribeSpotFleetInstances
                  - ec2:DescribeSpotFleetRequestHistory
                  - ec2:DescribeSpotFleetRequests
                  - ec2:DescribeSpotInstanceRequests
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeStaleSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeTrafficMirrorFilters
                  - ec2:DescribeTrafficMirrorSessions
                  - ec2:DescribeTrafficMirrorTargets
                  - ec2:DescribeTransitGatewayAttachments
                  - ec2:DescribeTransitGatewayConnectPeers
                  - ec2:DescribeTransitGatewayConnects
                  - ec2:DescribeTransitGatewayMulticastDomains
                  - ec2:DescribeTransitGatewayPeeringAttachments
                  - ec2:DescribeTransitGatewayRouteTables
                  - ec2:DescribeTransitGatewayVpcAttachments
                  - ec2:DescribeTransitGateways
                  - ec2:DescribeVolumeAttribute
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumesModifications
                  - ec2:DescribeVpcAttribute
                  - ec2:DescribeVpcClassicLink
                  - ec2:DescribeVpcClassicLinkDnsSupport
                  - ec2:DescribeVpcEndpointConnectionNotifications
                  - ec2:DescribeVpcEndpointConnections
                  - ec2:DescribeVpcEndpointServiceConfigurations
                  - ec2:DescribeVpcEndpointServicePermissions
                  - ec2:DescribeVpcEndpointServices
                  - ec2:DescribeVpcEndpoints
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpnConnections
                  - ec2:DescribeVpnGateways
                Resource: '*'
        - PolicyName: GuardDuty
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - guardduty:CreateDetector
                  - guardduty:ListDetectors
                  - guardduty:DeleteDetector
                Resource:
                  !Sub
                    - arn:${Partition}:guardduty:${AWS::Region}:${AWS::AccountId}:*
                    - Partition:
                        !If
                        - GovCloudCondition
                        - aws-us-gov
                        - aws


#### Enable Config and Security Hub
  ConfigBucket:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}"
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*"

  ConfigRecorderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWS_ConfigRole

  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    DependsOn:
      - ConfigBucketPolicy
    Properties:
      RoleARN: !GetAtt ConfigRecorderRole.Arn
      RecordingGroup:
        AllSupported: True
        IncludeGlobalResourceTypes: True

  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
      - ConfigBucketPolicy
    Properties:
      S3BucketName: !Ref ConfigBucket

  SecurityHub:
    Type: "AWS::SecurityHub::Hub"

  LambdaRoleV2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns: # TODO get rid of managed policy
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'iam:UpdateAccountPasswordPolicy'
            - 'iam:DeleteAccountPasswordPolicy'
            Resource: '*'
  LambdaFunctionV2: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import logging
          import boto3
          import cfnresponse
          
          iam = boto3.client('iam')
          
          def update_policy(event):
            try:
              AllowUsersToChangePassword = bool(event['ResourceProperties'].get('AllowUsersToChangePassword', None))
              HardExpiry = bool(event['ResourceProperties'].get('HardExpiry', None))
              MaxPasswordAge = int(event['ResourceProperties'].get('MaxPasswordAge', None))
              MinimumPasswordLength = int(event['ResourceProperties'].get('MinimumPasswordLength', None))
              RequireLowercaseCharacters = bool(event['ResourceProperties'].get('RequireLowercaseCharacters', None))
              RequireNumbers = bool(event['ResourceProperties'].get('RequireNumbers', None))
              RequireSymbols = bool(event['ResourceProperties'].get('RequireSymbols', None))
              RequireUppercaseCharacters = bool(event['ResourceProperties'].get('RequireUppercaseCharacters', None))
              PasswordReusePrevention = int(event['ResourceProperties'].get('PasswordReusePrevention', None))
          
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=AllowUsersToChangePassword,
                  HardExpiry=HardExpiry,
                  MaxPasswordAge=MaxPasswordAge,
                  MinimumPasswordLength=MinimumPasswordLength,
                  RequireLowercaseCharacters=RequireLowercaseCharacters,
                  RequireNumbers=RequireNumbers,
                  RequireSymbols=RequireSymbols,
                  RequireUppercaseCharacters=RequireUppercaseCharacters,
                  PasswordReusePrevention=PasswordReusePrevention)
              print(response)
              return True
            except Exception as e:
              return False
          
          def lambda_handler(event, context):
            print(event)
          
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
          
            responseData = {}
          
            print(update_policy(event))
          
            if update_policy(event):
              logger.info('responseData {}'.format(responseData))
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              logger.info('responseData {}'.format(responseData))
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
      Handler: 'index.lambda_handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRoleV2.Arn'
      Runtime: 'python3.7'
      Timeout: 60
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunctionV2}'
      RetentionInDays: !Ref LogsRetentionInDays
  PasswordPolicy:
    Type: 'Custom::PasswordPolicy'
    DependsOn: LambdaLogGroup
    Version: '1.0'
    Properties:
      HardExpiry: !Ref HardExpiry
      AllowUsersToChangePassword: !Ref AllowUsersToChangePassword
      MaxPasswordAge: !Ref MaxPasswordAge
      MinimumPasswordLength: !Ref MinimumPasswordLength
      PasswordReusePrevention: !Ref PasswordReusePrevention
      RequireLowercaseCharacters: !Ref RequireLowercaseCharacters
      RequireNumbers: !Ref RequireNumbers
      RequireSymbols: !Ref RequireSymbols
      RequireUppercaseCharacters: !Ref RequireUppercaseCharacters
      ServiceToken: !GetAtt 'LambdaFunctionV2.Arn'

#### Lock default security groups
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'lambda.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns: # TODO get rid of managed policy
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: iam
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:DescribeSecurityGroups'
            - 'ec2:RevokeSecurityGroupEgress'
            - 'ec2:RevokeSecurityGroupIngress'
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2:RevokeSecurityGroupIngress
              - ec2:RevokeSecurityGroupEgress
            Resource: '*'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: "This is a role used by lambda to tighten the default VPC security groups. We do not know the resource IDs prior to creating therefore the security group resource cannot be scoped down."

  LockDefaultSGLambdaFunction: # needs no monitoring because it is used as a custom resource
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          from botocore.vendored import requests
          import boto3
          import json
          
          ec2Client = boto3.resource('ec2')
          
          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False):
              responseUrl = event['ResponseURL']
          
              responseBody = {}
              responseBody['Status'] = responseStatus
              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
              responseBody['StackId'] = event['StackId']
              responseBody['RequestId'] = event['RequestId']
              responseBody['LogicalResourceId'] = event['LogicalResourceId']
              responseBody['NoEcho'] = noEcho
              responseBody['Data'] = responseData
          
              json_responseBody = json.dumps(responseBody)
          
              print("Response body:\n" + json_responseBody)
          
              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }
          
              try:
                  response = requests.put(responseUrl,
                                          data=json_responseBody,
                                          headers=headers)
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))
          
          def getDefaultSgs():
              security_groups = []
              for security_group in boto3.client('ec2').describe_security_groups()['SecurityGroups']:
                  if security_group['GroupName'] == 'default':
                      security_groups.append(security_group)
              return security_groups
          
          def lockSgs():
              for group in getDefaultSgs():
                  sgResource = ec2Client.SecurityGroup(group['GroupId'])
                  if sgResource.ip_permissions != []:
                      print(sgResource.revoke_ingress(IpPermissions = sgResource.ip_permissions))
                  if sgResource.ip_permissions_egress != []:
                      print(sgResource.revoke_egress(IpPermissions = sgResource.ip_permissions_egress))
              return
          
          def lambda_handler(event, context):
              print(event)
              if event['RequestType'] == 'Create':
                  try:
                      lockSgs()
                      send(event, context, "SUCCESS", {}, "defaultVPCFlowLogs")
                  except:
                      send(event, context, "FAILED", {}, "defaultVPCFlowLogs")
              elif event['RequestType'] == 'Update':
                  try:
                      lockSgs()
                      send(event, context, "SUCCESS", {}, "defaultVPCFlowLogs")
                  except:
                      send(event, context, "FAILED", {}, "defaultVPCFlowLogs")
              elif event['RequestType'] == 'Delete':
                  try:
                      send(event, context, "SUCCESS", {}, "defaultVPCFlowLogs")
                  except:
                      send(event, context, "FAILED", {}, "defaultVPCFlowLogs")
              else:
                  send(event, context, "FAILED", {}, "defaultVPCFlowLogs")
              return
      Handler: 'index.lambda_handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'python3.7'
      Timeout: 60
  LockDefaultSGLambdaFunctionLambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LockDefaultSGLambdaFunction}'
      
  lockDefaultSecurityGroups:
    Type: 'Custom::lockDefaultSecurityGroups'
    DependsOn: LockDefaultSGLambdaFunctionLambdaLogGroup
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'LockDefaultSGLambdaFunction.Arn'

  S3CloudTrailBucket:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::S3::Bucket

  CloudTrailBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3CloudTrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'

  CloudTrailKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: Key policy created by CloudTrail
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
          Action: 
            - kms:CancelKeyDeletion
            - kms:ConnectCustomKeyStore
            - kms:CreateAlias
            - kms:CreateCustomKeyStore
            - kms:CreateGrant
            - kms:CreateKey
            - kms:Decrypt
            - kms:DeleteAlias
            - kms:DeleteCustomKeyStore
            - kms:DeleteImportedKeyMaterial
            - kms:DescribeCustomKeyStores
            - kms:DescribeKey
            - kms:DisableKey
            - kms:DisableKeyRotation
            - kms:DisconnectCustomKeyStore
            - kms:EnableKey
            - kms:EnableKeyRotation
            - kms:Encrypt
            - kms:GenerateDataKey
            - kms:GenerateDataKeyPair
            - kms:GenerateDataKeyPairWithoutPlaintext
            - kms:GenerateDataKeyWithoutPlaintext
            - kms:GenerateRandom
            - kms:GetKeyPolicy
            - kms:GetKeyRotationStatus
            - kms:GetParametersForImport
            - kms:GetPublicKey
            - kms:ImportKeyMaterial
            - kms:ListAliases
            - kms:ListGrants
            - kms:ListKeyPolicies
            - kms:ListKeys
            - kms:ListResourceTags
            - kms:ListRetirableGrants
            - kms:PutKeyPolicy
            - kms:ReEncryptFrom
            - kms:ReEncryptTo
            - kms:RetireGrant
            - kms:RevokeGrant
            - kms:ScheduleKeyDeletion
            - kms:Sign
            - kms:TagResource
            - kms:UntagResource
            - kms:UpdateAlias
            - kms:UpdateCustomKeyStore
            - kms:UpdateKeyDescription
            - kms:Verify
          Resource: "*"
        - Sid: Allow CloudTrail to encrypt logs
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: 
            - kms:GenerateDataKey
            - kms:GenerateDataKeyPair
            - kms:GenerateDataKeyPairWithoutPlaintext
            - kms:GenerateDataKeyWithoutPlaintext
          Resource: "*"
          Condition:
            StringLike:
              kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:${AWS::Partition}:cloudtrail:*:${AWS::AccountId}:trail/*
        - Sid: Allow CloudTrail to describe key
          Effect: Allow
          Principal:
            Service: cloudtrail.amazonaws.com
          Action: kms:DescribeKey
          Resource: "*"
        - Sid: Allow principals in the account to decrypt log files
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - kms:Decrypt
          - kms:ReEncryptFrom
          Resource: "*"
          Condition:
            StringEquals:
              kms:CallerAccount: !Sub '${AWS::AccountId}'
            StringLike:
              kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:${AWS::Partition}:cloudtrail:*:${AWS::AccountId}:trail/*
        - Sid: Allow alias creation during setup
          Effect: Allow
          Principal:
            AWS: "*"
          Action: kms:CreateAlias
          Resource: "*"
          Condition:
            StringEquals:
              kms:CallerAccount: !Sub '${AWS::AccountId}'
              kms:ViaService: ec2.eu-west-2.amazonaws.com
        - Sid: Enable cross account log decryption
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - kms:Decrypt
          - kms:ReEncryptFrom
          Resource: "*"
          Condition:
            StringEquals:
              kms:CallerAccount: !Sub '${AWS::AccountId}'
            StringLike:
              kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:${AWS::Partition}:cloudtrail:*:${AWS::AccountId}:trail/*
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
          ignore_reasons:
            EIAMPolicyWildcardResource: "This role is scope to the CloudTrail principal. We do not know what resources CloudTrail needs to manage so leave it as a wildcard."

  CloudTrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 14

  CloudTrailLogGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: !GetAtt 'CloudTrailLogGroup.Arn'

  cloudtrail:
    Type: "AWS::CloudTrail::Trail"
    Properties:
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      KMSKeyId: !Ref CloudTrailKmsKey
      EnableLogFileValidation: true
      S3BucketName: !Ref S3CloudTrailBucket
      IsLogging: true
      CloudWatchLogsLogGroupArn: !GetAtt 'CloudTrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'CloudTrailLogGroupRole.Arn'

  CisSnsTopic:
    Type: AWS::SNS::Topic

  CisAlertsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref CisAlertingEmail
      Protocol: email
      TopicArn: !Ref CisSnsTopic

  CisUnauthorizedApiCalls: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.errorCode="*UnauthorizedOperation") || ($.errorCode="AccessDenied*")}'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.1-UnauthorizedAPICalls"

  CisUnauthorizedApiCallsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisUnauthorizedApiCalls
      AlarmDescription: Monitoring unauthorized API calls helps reveal application errors and might reduce time to detect malicious activity.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisUnauthorizedApiCalls
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisConsoleSigninWithoutMfa:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.eventName="ConsoleLogin") && ($.additionalEventData.MFAUsed !="Yes")}'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.2-ConsoleSigninWithoutMFA"

  CisConsoleSigninWithoutMfaAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisConsoleSigninWithoutMfa
      AlarmDescription: Monitoring for single-factor console logins increases visibility into accounts that aren't protected by MFA.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisConsoleSigninWithoutMfa
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisRootAccountUsage:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{$.userIdentity.type="Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !="AwsServiceEvent"}'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.3-RootAccountUsage"

  CisRootAccountUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisRootAccountUsage
      AlarmDescription: Monitoring for root account logins provides visibility into the use of a fully privileged account and an opportunity to reduce the use of it.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisRootAccountUsage
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisIAMPolicyChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy)}'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.4-IAMPolicyChanges"

  CisIAMPolicyChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisIAMPolicyChanges
      AlarmDescription: Monitoring these changes helps ensure that authentication and authorization controls remain intact.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisIAMPolicyChanges
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisCloudTrailChanges:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.eventName=CreateTrail) || ($.eventName=UpdateTrail) || ($.eventName=DeleteTrail) || ($.eventName=StartLogging) || ($.eventName=StopLogging)}'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.5-CloudTrailChanges"

  CisCloudTrailChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisCloudTrailChanges
      AlarmDescription: Monitoring these changes helps ensure sustained visibility to activities in the account.
      AlarmActions:      
      - !Ref CisSnsTopic
      MetricName: !Ref CisCloudTrailChanges
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisConsoleAuthenticationFailure:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.eventName=ConsoleLogin) && ($.errorMessage="Failed authentication")}'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.6-ConsoleAuthenticationFailure"

  CisConsoleAuthenticationFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisConsoleAuthenticationFailure
      AlarmDescription: Monitoring failed console logins might decrease lead time to detect an attempt to brute-force a credential, which might provide an indicator, such as source IP, that you can use in other event correlations.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisConsoleAuthenticationFailure
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

  CisDisableOrDeleteCMK:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref CloudTrailLogGroup
      FilterPattern: '{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}'
      MetricTransformations:
        -
          MetricValue: '1'
          MetricNamespace: "LogMetrics"
          MetricName: "CIS-3.7-DisableOrDeleteCMK"

  CisDisableOrDeleteCMKAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CisDisableOrDeleteCMK
      AlarmDescription: Checks data encrypted with disabled or deleted keys is no longer accessible.
      AlarmActions:
      - !Ref CisSnsTopic
      MetricName: !Ref CisDisableOrDeleteCMK
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching

Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'security/account-password-policy'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
